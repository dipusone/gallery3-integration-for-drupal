<?php

/**
* @file
* Module to integrate drupal and gallery
* Author: Dipusone
*/


include 'lib/PasswordHash.php';


function gallery3_integration_menu() {
  $items['admin/config/people/gallery3-integration'] = array(
    'title' => 'Gallery3 integration',
    'description' => 'Let you manage the users and groups from gallery3 directly from drupal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery3_integration_admin_form'),
    'access arguments' => array('Access admin page for the module'),
    'file' => 'gallery3_integration.admin.inc',

  );
  return $items;
}


function gallery3_integration_help($path, $arg) {
  switch ($path) {
    case "admin/help#gallery3_integration":
      return '<p>' . t("Integrate the users and groups management for gallery in drupal.<br>").
      t("It assumes that the gallary3 databases resides on the same address of the drupal one,").
      t(" otherwise it will not work.<br>").
      t("Hand written by Ikpo, so if there is any problem...Dance!") . '</p>';
      break;
  }
}


function gallery3_integration_user_presave($edit, $account, $category){

  variable_set('user_password_gallery3_hashed', gallery3_integration_hash_password($account->pass));
}


function gallery3_integration_user_insert(&$edit, $account, $category){

  $first_name=$account->field_nome['und'][0]['value'];
  $second_name=$account->field_cognome['und'][0]['value'];
  $full=$first_name." ".$second_name;
  $placeh=array(
    ':name'=> $account->name,
    ':full' =>$full,
    ':pass'=>variable_get('user_password_gallery3_hashed'),
    ':login_count'=>$account->access,
    ':last_login'=>'0',
    ':email'=> $account->mail,
    ':admin'=>'0',
    ':guest'=>'0');


  $USERS_TABLE = variable_get('gallery3_integration_db_prefix').'users';

  db_query("INSERT INTO $USERS_TABLE ( `name`,
                                       `full_name`,
                                       `password`,
                                       `login_count`,
                                       `last_login`,
                                       `email`,
                                       `admin`,
                                       `guest`)
            VALUES ( :name,:full,:pass,:login_count,:last_login,:email,:admin,:guest)", $placeh);

  gallery3_integration_add_groups($account,variable_get('gallery3_integration_manage_groups'));

  //If the user is set to be admin in gallery do it
  if(variable_get('gallery3_integration_manage_admin')) {
    if(array_key_exists(variable_get('gallery3_integration_admin_role'), $account->roles)){
      $g_id = gallery3_integration_get_user_id($account->name);
      gallery3_integration_set_gallery_admin($g_id);
    }
  }
  variable_del('user_password_gallery3_hashed');
}


function gallery3_integration_user_delete($account){

  $id=gallery3_integration_get_user_id($account->name);

  gallery3_integration_transfer_items_ownership_to_admin($id);
  $placeh=array(':id'=> $id);

  $USERS_TABLE = variable_get('gallery3_integration_db_prefix').'users';
  $GROUPS_TABLE = variable_get('gallery3_integration_db_prefix').'groups_users';

  db_query("DELETE FROM $USERS_TABLE WHERE id=:id",$placeh);
  db_query("DELETE FROM $GROUPS_TABLE WHERE user_id=:id",$placeh);

  variable_del('user_password_gallery3_hashed');
}


function gallery3_integration_user_cancel($edit, $account, $method){
  gallery3_integration_user_delete($account);
}


function gallery3_integration_user_update(&$edit, $account, $category) {
  //Since gallery3_integration_user_presave can get the plaintext password the it from the $_POST part.
  //This could be broken on future update of drupal!
  //TODO: change the way i get password from $_POST['pass']['pass1'] to hook_field_attach_submit
  /**
   * Could use:
   * hook_field_attach_submit() worked. The new pass was in $form["#user"]["pass"]
   * check $entity_type == 'user'
   *
   *
   **/

  variable_set('user_password_gallery3_hashed', gallery3_integration_hash_password( $_POST['pass']['pass1']));


  //Maybe using variables variable http://php.net/manual/en/language.variables.variable.php
  $first_name=$account->field_nome['und'][0]['value'];
  $second_name=$account->field_cognome['und'][0]['value'];
  $full=$first_name." ".$second_name;
  $id=gallery3_integration_get_user_id($account->name);


  $USERS_TABLE = variable_get('gallery3_integration_db_prefix').'users';
  $GROUPS_TABLE = variable_get('gallery3_integration_db_prefix').'groups_users';


  $query = "UPDATE $USERS_TABLE SET `name`=:name,
                                    `full_name`=:full,
                                    `login_count`=:login_count,
                                    `email`=:email ";
  $placeh=array(
    ':name'=> $account->name,
    ':full' =>$full,
    ':login_count'=>$account->access,
    ':email'=> $account->mail,
    ':id'=>$id
    );

  //check if the password is not changed and in this case do not edit it.
  //If the account password has been changed add to the query and the placeholder array
  //the values
  if($account->original->pass != $account->pass){
    $query .= ', `password`=:pass ';
    $placeh[':pass'] = variable_get('user_password_gallery3_hashed');
  }
  //add the final where clause to query
  $query .=  'WHERE id=:id';

  db_query($query, $placeh);
  //TODO: instead of deleting all groups for the user get them and apply only modifications?
  db_query("DELETE FROM $GROUPS_TABLE WHERE user_id=:id",array(':id' => $id ));


  gallery3_integration_add_groups($account,variable_get('gallery3_integration_manage_groups'));


  //If the plugin is enabled to manage tha gallery admin do it.
  if(variable_get('gallery3_integration_manage_admin')) {
    $g_id = gallery3_integration_get_user_id($account->name);
    $is_gallery_admin = array_key_exists(variable_get('gallery3_integration_admin_role'),
                                         $account->roles);
    gallery3_integration_set_gallery_admin($g_id, $is_gallery_admin);
  }
  variable_del('user_password_gallery3_hashed');
}


/**
 *Hook called during role creation
 *
 **/
function gallery3_integration_user_role_insert($role){
  //If it is asked not to manage the groups or the group already exist in gallery3 return

  if(!variable_get('gallery3_integration_manage_groups') || gallery3_integration_get_group_id($role->name)){
    return;
  }

  $GROUPS_TABLE = variable_get('gallery3_integration_db_prefix').'groups';
  db_query("INSERT INTO ".$GROUPS_TABLE." ( `name`) VALUES ( :name)",array(':name' => $role->name));
}


/**
 * Hook called during role deletion
 *
 **/

function gallery3_integration_user_role_delete($role){

  $id = gallery3_integration_get_group_id($role->name);
  //If it is asked not to manage groups or the group do not exist in gallery3 return
  if(!variable_get('gallery3_integration_manage_groups') || !$id){
    return;
  }

  $GROUPS_USERS_TABLE = variable_get('gallery3_integration_db_prefix').'groups_users';
  //Remove all associations user->groups
  db_query("DELETE FROM $GROUPS_USERS_TABLE WHERE group_id=:id",array(':id' => $id ));

  $GROUPS_TABLE = variable_get('gallery3_integration_db_prefix').'groups';
  db_query("DELETE FROM $GROUPS_TABLE WHERE id=:id",array(':id' => $id ));

}


/**
 * This function will transfer the ownership of all items of $g_id to the admin
 * with the lowest id.
 *
 * @param int $g_id the id of the user that is deleted.
 *
 **/
function gallery3_integration_transfer_items_ownership_to_admin($g_id){

  //The plan is this:
  /**
   *get the admin whit lower id:   SELECT * FROM g3_users WHERE admin=1 ORDER BY id ASC; (to be sure)
   * all items from a user should  be in  SELECT id FROM g3_items where owner_id=$g_id;
   * or simply
   * UPDATE `g3_items`  SET owner_id=$admin_id  where owner_id=$deleted_user;
   * this should set all the items by deleted user to admin one.
   **/
  $ITEMS_TABLE = variable_get('gallery3_integration_db_prefix').'items';
  $USERS_TABLE = variable_get('gallery3_integration_db_prefix').'users';

  $admin_id = db_query("SELECT `id` FROM $USERS_TABLE WHERE `admin`=1 ORDER BY id ASC")->fetchField();
  $placeh = array(
    ':g_user_id' => $g_id,
    ':admin_id' => $admin_id );
  db_query("UPDATE $ITEMS_TABLE  SET owner_id=:admin_id  where owner_id=:g_user_id", $placeh);
}


function gallery3_integration_get_group_id($group){
  $GROUPS_TABLE = variable_get('gallery3_integration_db_prefix').'groups';

  $res=db_query("SELECT `id` FROM $GROUPS_TABLE WHERE name=:nome ",array(':nome' => $group))->fetchField();
  return $res;

}

function gallery3_integration_get_user_id($user){

  $ph=array(':nome'=>$user);

  $USERS_TABLE = variable_get('gallery3_integration_db_prefix').'users';
  $res=db_query("SELECT `id` FROM $USERS_TABLE WHERE name=:nome ",$ph)->fetchField();
  return $res;
}


function gallery3_integration_hash_password($pass){
  #hash calculator for the password
  $hasher= new PasswordHash(10, true);
  $pass=$hasher->HashPassword($pass);
  return $pass;
}


function gallery3_integration_get_gallery3_groups(){

  $GROUPS_TABLE = variable_get('gallery3_integration_db_prefix').'groups';
  $results = db_query("SELECT `id`, name from $GROUPS_TABLE ORDER BY name")->fetchAll();

  $groups = array();
  foreach ($results as $group) {
    $groups[$group->id] = $group->name;
  }
  //Added to let the user not to select and association
  $groups['None'] = 'None';

  return $groups;
}

/**
 *This function will add to the user in gallery3 all the groups (s)he has in drupal
 *
 * @param account $account the user account from drupal.
 * @param bool $extended_groups if the function ha to add all the groups to the user apart from default ones.
 *
 **/
function gallery3_integration_add_groups($account, $extended_groups=FALSE){
  $g_id=gallery3_integration_get_user_id($account->name);

  $GROUPS_TABLE = variable_get('gallery3_integration_db_prefix').'groups_users';
  //default roles
  $roles = array('1' => $g_id,
                 '2' => $g_id);

  //Build a list of role and id
  //This will also eliminate possible duplicates in roles
  if($extended_groups){
    foreach ($account->roles as $d_id => $d_role) {
      //for now skip admin role and the base one
      if($d_role <= 3){
        continue;
      }
      $g_role = variable_get('gallery3_integration_role_'."$d_id");
      if(!empty($g_role) && $g_role !== 'None'){
        $roles["$g_role"] = $g_id;
      }
    }
  }

  foreach ($roles as $g_role => $g_id) {
    db_query("INSERT INTO $GROUPS_TABLE (`group_id`, `user_id`) VALUES (:role,  :id)",
        array(':role' => $g_role,':id'=>$g_id));

  }

}


function gallery3_integration_set_gallery_admin($g_id, $set_admin=TRUE){
  $USERS_TABLE = variable_get('gallery3_integration_db_prefix').'users';
  $placeh = array(':admin' =>  $set_admin ? 1 : 0,
                  ':id' => $g_id,
                  );

  db_query("UPDATE $USERS_TABLE SET `admin`=:admin  WHERE id=:id", $placeh);

}
